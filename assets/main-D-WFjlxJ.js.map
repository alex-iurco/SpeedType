{"version":3,"file":"main-D-WFjlxJ.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/components/CarIcon.jsx","../../src/components/RaceTrack.jsx","../../src/components/TypingArea.jsx","../../src/config/version.js","../../src/App.jsx","../../src/main.jsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import React from 'react';\n\nconst CarIcon = ({ color }) => (\n  <svg\n    width=\"40\"\n    height=\"20\"\n    viewBox=\"0 0 40 20\"\n    fill={color}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M36 8h-2l-2-4h-16l-2 4h-2c-1.1 0-2 .9-2 2v3c0 1.1.9 2 2 2h1c0 1.66 1.34 3 3 3s3-1.34 3-3h10c0 1.66 1.34 3 3 3s3-1.34 3-3h1c1.1 0 2-.9 2-2v-3c0-1.1-.9-2-2-2zm-24 7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm16 0c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm2-7h-18v-4h16l2 4z\"\n    />\n  </svg>\n);\n\nexport default CarIcon; ","import React from 'react';\nimport './RaceTrack.css';\nimport CarIcon from './CarIcon';\n\nfunction RaceTrack({ racers, onReady, isReady, countdown, raceState }) {\n  // Assign distinct colors to racers (simple approach)\n  const colors = ['#4169e1', '#dc143c', '#8b0000', '#4682b4', '#32cd32', '#ffd700'];\n  const getRacerColor = (index) => colors[index % colors.length];\n\n  // Sort racers by progress to determine places\n  const sortedRacers = [...racers].sort((a, b) => b.progress - a.progress);\n  const getPlace = (racer) => {\n    const place = sortedRacers.findIndex(r => r.id === racer.id) + 1;\n    if (place === 1) return '1st Place!';\n    if (place === 2) return '2nd Place.';\n    if (place === 3) return '3rd Place.';\n    return `${place}th Place.`;\n  };\n\n  // Ensure we always have at least one racer (the player) in single-player mode\n  const displayRacers = racers.length > 0 ? racers : [{ id: 'player', name: 'You', progress: 0, wpm: 0 }];\n\n  return (\n    <div className=\"race-track-container\">\n      <div className=\"race-status\">\n        {countdown > 0 && (\n          <div className=\"countdown\" data-testid=\"race-countdown\">\n            Race starts in: {countdown}\n          </div>\n        )}\n        {!isReady && onReady && (\n          <button \n            onClick={onReady} \n            className=\"ready-button\"\n            data-testid=\"race-ready-button\"\n          >\n            Ready\n          </button>\n        )}\n      </div>\n      <div className=\"race-track\" data-testid=\"race-player-list\" data-race-state={raceState}>\n        {displayRacers.map((racer, index) => (\n          <div key={racer.id} className=\"car-lane\" data-testid=\"race-player-slot\">\n            <div className=\"lane-info\">\n              <span className=\"racer-name\">{racer.name || `Player ${index + 1}`}</span>\n              <span className=\"racer-stats\">\n                <span className=\"wpm-display\">{racer.wpm || 0} WPM</span>\n                <span className=\"progress-display\">{Math.round(racer.progress || 0)}%</span>\n                {racer.progress >= 100 && (\n                  <span className=\"place-display\">{getPlace(racer)}</span>\n                )}\n              </span>\n            </div>\n            <div className=\"lane-divider\"></div>\n            <div className=\"race-progress\">\n              <div\n                className=\"car-container\"\n                style={{\n                  left: `${racer.progress || 0}%`,\n                  transition: 'left 0.2s ease-out'\n                }}\n              >\n                <CarIcon color={getRacerColor(index)} />\n              </div>\n              <div className=\"finish-line\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default RaceTrack; ","import React, { useState, useEffect, useRef } from 'react';\nimport './TypingArea.css';\n\nconst TypingArea = ({ textToType = '', onProgress, isMultiplayer, isStarted, onStart, isRaceComplete }) => {\n  const [input, setInput] = useState('');\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [isError, setIsError] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [wpm, setWpm] = useState(0);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const inputRef = useRef(null);\n  const lastProgressRef = useRef(0);\n  const textRef = useRef(textToType);\n\n  // Split text into words\n  const words = textToType.split(' ');\n  const currentWord = words[currentWordIndex] || '';\n\n  // Update text ref when text changes\n  useEffect(() => {\n    console.log('Text changed:', textToType);\n    textRef.current = textToType;\n  }, [textToType]);\n\n  // Reset state when race starts or text changes\n  useEffect(() => {\n    console.log('Text or race state changed:', { textToType, isStarted, isRaceComplete });\n    if (textToType) {\n      setInput('');\n      setCurrentWordIndex(0);\n      setIsError(false);\n      setProgress(0);\n      lastProgressRef.current = 0;\n      setIsCompleted(false);\n      setStartTime(null);\n      setWpm(0);\n    }\n  }, [textToType]);\n\n  // Set start time when race starts\n  useEffect(() => {\n    console.log('Race started:', isStarted);\n    if (isStarted && !startTime) {\n      setStartTime(Date.now());\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    }\n  }, [isStarted]);\n\n  // Only update WPM periodically\n  useEffect(() => {\n    if (!startTime) return;\n    if (!isStarted && !isCompleted) return;\n    if (isCompleted) {\n      // Don't start interval if race is completed\n      return;\n    }\n\n    const calculateWPM = () => {\n      const timeElapsed = (Date.now() - startTime) / 1000 / 60; // in minutes\n      if (timeElapsed === 0) return 0;\n      \n      // Count completed words including the current word if it's complete\n      let completedWords = currentWordIndex;\n      if (input === currentWord) {\n        completedWords++;\n      }\n      \n      return Math.round(completedWords / timeElapsed);\n    };\n\n    const interval = setInterval(() => {\n      if (isCompleted) {\n        // Clear interval if race becomes completed\n        clearInterval(interval);\n        return;\n      }\n      const currentWPM = calculateWPM();\n      setWpm(currentWPM);\n      onProgress(lastProgressRef.current, input, currentWPM);\n    }, 1000); // Update every second\n\n    // Calculate initial WPM\n    const initialWPM = calculateWPM();\n    setWpm(initialWPM);\n    onProgress(lastProgressRef.current, input, initialWPM);\n\n    return () => clearInterval(interval);\n  }, [isStarted, isCompleted, startTime, currentWordIndex, input, currentWord]);\n\n  const calculateProgress = (newInput) => {\n    if (!textToType) return 0;\n    if (isCompleted) return 100;\n\n    // Calculate total characters in completed words\n    const completedWords = words.slice(0, currentWordIndex);\n    let totalCorrectChars = completedWords.join(' ').length;\n    \n    // Add correct characters from current word\n    if (newInput) {\n      for (let i = 0; i < newInput.length && i < currentWord.length; i++) {\n        if (newInput[i] === currentWord[i]) {\n          totalCorrectChars++;\n        } else {\n          break;\n        }\n      }\n    }\n\n    // Calculate progress percentage\n    const totalChars = textToType.length;\n    const progress = Math.min(100, Math.round((totalCorrectChars / totalChars) * 100));\n    return progress;\n  };\n\n  const handleInputChange = (e) => {\n    if (!isStarted || isCompleted || !textToType) return;\n    \n    const newInput = e.target.value;\n    setInput(newInput);\n\n    // Check if the current input matches the current word\n    if (currentWord.startsWith(newInput)) {\n      setIsError(false);\n      const newProgress = calculateProgress(newInput);\n      setProgress(newProgress);\n      lastProgressRef.current = newProgress;\n      // Only emit progress update on actual progress change\n      if (newProgress !== progress) {\n        onProgress(newProgress, newInput, wpm);\n      }\n\n      // Check if we've completed the last word\n      if (currentWordIndex === words.length - 1 && newInput === currentWord) {\n        setIsCompleted(true);\n        const finalProgress = 100;\n        setProgress(finalProgress);\n        lastProgressRef.current = finalProgress;\n        // Calculate final WPM\n        const timeElapsed = (Date.now() - startTime) / 1000 / 60;\n        const finalWPM = Math.round((currentWordIndex + 1) / timeElapsed);\n        setWpm(finalWPM);\n        onProgress(finalProgress, newInput, finalWPM);\n      }\n    } else {\n      setIsError(true);\n    }\n\n    // If space is pressed and input matches current word\n    if (e.nativeEvent.data === ' ' && newInput.trim() === currentWord) {\n      if (currentWordIndex === words.length - 1) {\n        // Race completed\n        setIsCompleted(true);\n        const finalProgress = 100;\n        setProgress(finalProgress);\n        lastProgressRef.current = finalProgress;\n        // Calculate final WPM\n        const timeElapsed = (Date.now() - startTime) / 1000 / 60;\n        const finalWPM = Math.round((currentWordIndex + 1) / timeElapsed);\n        setWpm(finalWPM);\n        onProgress(finalProgress, newInput, finalWPM);\n      } else {\n        // Move to next word\n        setCurrentWordIndex(prev => prev + 1);\n        setInput('');\n        setIsError(false);\n        \n        // Calculate progress for the completed word including its space\n        const completedText = words.slice(0, currentWordIndex + 1).join(' ');\n        const newProgress = calculateProgress(completedText);\n        \n        // Ensure progress never decreases\n        if (newProgress > lastProgressRef.current) {\n          setProgress(newProgress);\n          lastProgressRef.current = newProgress;\n          onProgress(newProgress, '', wpm);\n        } else {\n          // If progress would decrease, keep the previous progress\n          onProgress(lastProgressRef.current, '', wpm);\n        }\n      }\n    }\n  };\n\n  const renderText = () => {\n    if (!textToType) {\n      console.log('No text to render');\n      return null;\n    }\n    \n    console.log('Rendering text:', textToType);\n    let typedCharCount = 0;\n    const typedWords = words.slice(0, currentWordIndex).join(' ');\n    typedCharCount = typedWords.length + (currentWordIndex > 0 ? 1 : 0); // Add space if not first word\n\n    return (\n      <div className=\"text-display\">\n        {words.map((word, wordIndex) => {\n          const isCurrentWord = wordIndex === currentWordIndex;\n          const isPastWord = wordIndex < currentWordIndex;\n          \n          return (\n            <React.Fragment key={wordIndex}>\n              {wordIndex > 0 && ' '}\n              {word.split('').map((char, charIndex) => {\n                const isTyped = isPastWord || (isCurrentWord && charIndex < input.length);\n                const isCorrect = isPastWord || (isCurrentWord && input[charIndex] === char);\n                \n                return (\n                  <span\n                    key={charIndex}\n                    className={`\n                      ${isTyped ? 'char-typed' : 'char-pending'}\n                      ${isTyped ? (isCorrect ? 'char-correct' : 'char-incorrect') : ''}\n                      ${char === ' ' ? 'char-space' : ''}\n                    `}\n                  >\n                    {char}\n                  </span>\n                );\n              })}\n            </React.Fragment>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"typing-area-container\">\n      {/* Debug info */}\n      <div style={{ display: 'none' }}>\n        <p>Text: {textToType}</p>\n        <p>Started: {isStarted ? 'yes' : 'no'}</p>\n        <p>Complete: {isRaceComplete ? 'yes' : 'no'}</p>\n      </div>\n\n      {/* Always show text if available */}\n      {textToType && (\n        <div className=\"text-container\" style={{ opacity: isStarted ? 1 : 0.7 }}>\n          {renderText()}\n        </div>\n      )}\n      \n      {/* Show start button only in appropriate state */}\n      {!isStarted && !isMultiplayer && !isRaceComplete && (\n        <button className=\"start-button\" onClick={onStart}>\n          Start Race\n        </button>\n      )}\n      \n      {/* Show input field when race is active */}\n      {isStarted && !isCompleted && textToType && (\n        <div className=\"input-container\">\n          <input\n            ref={inputRef}\n            type=\"text\"\n            value={input}\n            onChange={handleInputChange}\n            className={`typing-input ${isError ? 'input-error' : ''}`}\n            placeholder=\"Type here...\"\n            disabled={!isStarted || isCompleted}\n            autoFocus\n          />\n          {isError && <div className=\"error-indicator\" />}\n        </div>\n      )}\n      \n      {/* Show completion message */}\n      {isCompleted && (\n        <div className=\"race-complete\">\n          <h3>Race Complete!</h3>\n          <div className=\"wpm-display\">{wpm} WPM</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TypingArea; ","// This file is automatically updated by the version bump workflow\nexport const APP_VERSION = '0.2.0';\n","import { useState, useEffect } from 'react'\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'\nimport io from 'socket.io-client'\nimport './App.css'\nimport RaceTrack from './components/RaceTrack'\nimport TypingArea from './components/TypingArea'\nimport { APP_VERSION } from './config/version'\n\n// Use production URL in production, localhost in development\nconst BACKEND_URL = import.meta.env.PROD \n  ? 'https://speedtype-backend-production.up.railway.app'\n  : 'http://localhost:3001';\n\n// Connect to the backend server\nconst socket = io(BACKEND_URL, {\n  transports: ['websocket', 'polling'],\n  autoConnect: true,\n  reconnection: true,\n  reconnectionAttempts: 5,\n  reconnectionDelay: 1000\n})\n\n// Fisher-Yates shuffle algorithm\nconst shuffle = (array) => {\n  let currentIndex = array.length, randomIndex;\n  while (currentIndex > 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n  return array;\n};\n\nconst fallbackQuotes = [\n  '\"Success is not final, failure is not fatal: it is the courage to continue that counts. Every day may not be good, but there is something good in every day. Keep your face always toward the sunshine, and shadows will fall behind you.\" - Winston Churchill',\n  '\"The future depends on what you do today. Yesterday is history, tomorrow is a mystery, but today is a gift. That is why it is called the present. Make the most of yourself, for that is all there is of you.\" - Mahatma Gandhi',\n  '\"Life is like riding a bicycle. To keep your balance, you must keep moving. Just as energy is the basis of life itself, and ideas the source of innovation, so is innovation the vital spark of all human change, improvement, and progress.\" - Albert Einstein',\n  '\"The only limit to our realization of tomorrow will be our doubts of today. Success is walking from failure to failure with no loss of enthusiasm. The harder you work for something, the greater you will feel when you achieve it.\" - George Addair',\n  '\"It does not matter how slowly you go as long as you do not stop. Our greatest glory is not in never falling, but in rising every time we fall. Life is not about waiting for the storm to pass but learning to dance in the rain.\" - Confucius',\n  '\"Twenty years from now you will be more disappointed by the things that you did not do than by the ones you did do. So throw off the bowlines. Sail away from the safe harbor. Catch the trade winds in your sails. Explore. Dream. Discover.\" - Mark Twain',\n  '\"The best way to predict the future is to create it. Success is not the key to happiness. Happiness is the key to success. If you love what you are doing, you will be successful. The journey of a thousand miles begins with one step.\" - Peter Drucker',\n  '\"What lies behind us and what lies before us are tiny matters compared to what lies within us. The only person you are destined to become is the person you decide to be. Be yourself; everyone else is already taken.\" - Ralph Waldo Emerson',\n  '\"Do not watch the clock; do what it does. Keep going. The difference between ordinary and extraordinary is that little extra. The harder you work for something, the greater you will feel when you achieve it.\" - Sam Levenson',\n  '\"Your time is limited, do not waste it living someone else\\'s life. Do not be trapped by dogma, which is living with the results of other people\\'s thinking. Do not let the noise of other\\'s opinions drown out your own inner voice.\" - Steve Jobs',\n  '\"The only impossible journey is the one you never begin. Life is not measured by the number of breaths we take, but by the moments that take our breath away. The purpose of our lives is to be happy and to make others happy.\" - Anthony Robbins',\n  '\"Success usually comes to those who are too busy to be looking for it. The future belongs to those who believe in the beauty of their dreams. Hard work beats talent when talent does not work hard.\" - Henry David Thoreau',\n  '\"The greatest glory in living lies not in never falling, but in rising every time we fall. Education is not preparation for life; education is life itself. The beautiful thing about learning is that no one can take it away from you.\" - Nelson Mandela',\n  '\"Everything you have ever wanted is on the other side of fear. Success is walking from failure to failure with no loss of enthusiasm. The only way to do great work is to love what you do.\" - George Addair',\n  '\"You are never too old to set another goal or to dream a new dream. The future depends on what you do today. Do not let yesterday take up too much of today. Life is what happens while you are busy making other plans.\" - C.S. Lewis'\n];\n\nfunction App() {\n  const [isConnected, setIsConnected] = useState(socket.connected)\n  const [raceState, setRaceState] = useState('waiting') // 'waiting', 'racing', 'finished'\n  const [textToType, setTextToType] = useState('')\n  const [racers, setRacers] = useState([])\n  const [myProgress, setMyProgress] = useState(0)\n  const [customText, setCustomText] = useState('') // State for the text area\n  const [typedText, setTypedText] = useState('') // Add state for the input field content\n  const [myWpm, setMyWpm] = useState(0) // Add state for WPM\n  const [quotes, setQuotes] = useState([])\n  const [isLoadingQuotes, setIsLoadingQuotes] = useState(false)\n  const [countdown, setCountdown] = useState(0) // Add state for countdown\n  const [currentRoom, setCurrentRoom] = useState(null)\n\n  // Fetch motivational quotes\n  const fetchQuotes = async () => {\n    setIsLoadingQuotes(true);\n    try {\n      const response = await fetch(`${BACKEND_URL}/api/quotes`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch quotes');\n      }\n      const data = await response.json();\n      setQuotes(data);\n    } catch (error) {\n      console.error('Error fetching quotes:', error);\n      // Fallback to local quotes if API fails\n      const shuffledQuotes = shuffle([...fallbackQuotes]).slice(0, 5);\n      setQuotes(shuffledQuotes);\n    } finally {\n      setIsLoadingQuotes(false);\n    }\n  };\n\n  // Fetch quotes when component mounts\n  useEffect(() => {\n    fetchQuotes();\n  }, []);\n\n  useEffect(() => {\n    function onConnect() {\n      setIsConnected(true)\n      console.log('Connected to backend')\n      // If we're in a room, rejoin it\n      if (currentRoom) {\n        socket.emit('joinRoom', currentRoom)\n      }\n    }\n\n    function onDisconnect() {\n      setIsConnected(false)\n      console.log('Disconnected from backend')\n      setTextToType('')\n      setRacers([])\n      setMyProgress(0)\n      setRaceState('waiting')\n      setCustomText('')\n      setMyWpm(0)\n      setCountdown(0)\n    }\n\n    function onRoomState(state) {\n      console.log('Received room state:', state)\n      // Only update race state if we're not already finished\n      if (raceState !== 'finished') {\n        setRaceState(state.status)\n      }\n    }\n\n    function onRaceUpdate(updatedRacers) {\n      console.log('Received race update:', updatedRacers)\n      // Find our racer\n      const myRacer = updatedRacers.find(r => r.id === socket.id);\n      \n      // Update other racers without affecting our state\n      setRacers(currentRacers => {\n        const otherRacers = updatedRacers.filter(r => r.id !== socket.id);\n        const me = currentRacers.find(r => r.id === socket.id) || myRacer;\n        \n        // If we're finished, ensure our progress stays at 100%\n        if (raceState === 'finished' && me) {\n          me.progress = 100;\n        }\n        \n        return [...otherRacers, me];\n      });\n    }\n\n    function onCountdown(value) {\n      console.log('Countdown:', value);\n      setCountdown(value);\n      \n      // Reset state and ensure text is set at countdown start\n      if (value === 3) {\n        console.log('Countdown started, resetting state');\n        setMyProgress(0);\n        setTypedText('');\n        setMyWpm(0);\n      }\n      \n      // Start race when countdown ends\n      if (value === 0) {\n        console.log('Countdown ended, starting race with text:', textToType);\n        setRaceState('racing');\n        // Ensure text is set\n        if (!textToType) {\n          console.error('No text set when countdown ended');\n        }\n      }\n    }\n\n    function onReceiveText(text) {\n      console.log('Received text:', text);\n      if (typeof text === 'string' && text.trim()) {\n        const formattedText = text.trim();\n        console.log('Setting received text:', formattedText);\n        setTextToType(formattedText);\n      } else {\n        console.error('Invalid text received:', text);\n      }\n    }\n\n    socket.on('connect', onConnect)\n    socket.on('disconnect', onDisconnect)\n    socket.on('room_state', onRoomState)\n    socket.on('race_text', onReceiveText)\n    socket.on('race_update', onRaceUpdate)\n    socket.on('countdown', onCountdown)\n\n    return () => {\n      socket.off('connect', onConnect)\n      socket.off('disconnect', onDisconnect)\n      socket.off('room_state', onRoomState)\n      socket.off('race_text', onReceiveText)\n      socket.off('race_update', onRaceUpdate)\n      socket.off('countdown', onCountdown)\n    }\n  }, [currentRoom, raceState, textToType])\n\n  const handleTypingProgress = (progress, currentInput, wpm) => {\n    if (raceState !== 'racing' && raceState !== 'finished') return;\n    if (raceState === 'finished') return; // Don't process updates if race is finished\n\n    setTypedText(currentInput);\n    \n    // Update our local state\n    setMyProgress(progress);\n    setMyWpm(wpm);\n    \n    // Update our racer in the list\n    setRacers(currentRacers => {\n      const otherRacers = currentRacers.filter(r => r.id !== socket.id);\n      const me = { \n        ...currentRacers.find(r => r.id === socket.id),\n        progress,\n        wpm\n      };\n      return [...otherRacers, me];\n    });\n    \n    // Send updates to server\n    socket.emit('progress_update', { progress });\n    socket.emit('wpm_update', { wpm });\n\n    // Check if race is complete\n    if (progress >= 100) {\n      setRaceState('finished');\n      socket.emit('progress_update', { progress: 100 });\n      socket.emit('wpm_update', { wpm });\n      \n      // Notify server that we finished\n      socket.emit('race_complete');\n    }\n  };\n\n  // Handler for the Start Race button\n  const handleStartRace = () => {\n    const raceText = customText.trim() || quotes[Math.floor(Math.random() * quotes.length)] || fallbackQuotes[0];\n    console.log('Starting race with text:', raceText);\n    \n    // Create unique room and join it\n    const singlePlayerRoom = `single-player-${Date.now()}`;\n    console.log('Creating room:', singlePlayerRoom);\n    \n    // Initialize race state before joining room\n    setRaceState('waiting');\n    setMyProgress(0);\n    setTypedText('');\n    setMyWpm(0);\n    setTextToType(raceText);\n    \n    // Set initial racer state\n    setRacers([{\n      id: socket.id,\n      name: 'You',\n      progress: 0,\n      wpm: 0\n    }]);\n\n    // Join room and handle race start\n    socket.emit('joinRoom', singlePlayerRoom);\n    setCurrentRoom(singlePlayerRoom);\n\n    // Listen for room joined event\n    socket.once('roomJoined', () => {\n      console.log('Room joined, submitting text:', raceText);\n      // Submit text and emit ready state\n      socket.emit('submit_custom_text', raceText);\n      // Mark player as ready after a short delay to ensure text is received\n      setTimeout(() => {\n        console.log('Marking player as ready');\n        socket.emit('ready');\n      }, 500);\n    });\n  };\n\n  const handleQuoteSelect = (quote) => {\n    setCustomText(quote);\n  };\n\n  const handleReady = () => {\n    console.log('Player ready');\n    if (!currentRoom) {\n      const roomId = 'default-room';\n      console.log('Joining default room:', roomId);\n      socket.emit('joinRoom', roomId);\n      setCurrentRoom(roomId);\n    }\n    socket.emit('ready');\n  };\n\n  return (\n    <Router>\n      <div className=\"app-container\">\n        <header className=\"app-header\">\n          <h1>\n            SpeedType Racing\n            <span className=\"version\">v{APP_VERSION}</span>\n          </h1>\n        </header>\n        <div className={`connection-status ${isConnected ? 'connected' : 'disconnected'}`}>\n          {isConnected ? 'Connected' : 'Disconnected'}\n        </div>\n        <Routes>\n          <Route path=\"/\" element={<Navigate to=\"/race\" replace />} />\n          <Route\n            path=\"/race\"\n            element={\n              <div className=\"race-container\">\n                {/* Show setup screen only when in waiting state and no countdown */}\n                {raceState === 'waiting' && countdown === 0 && (\n                  <div className=\"race-setup\">\n                    <div className=\"quote-selection\">\n                      <h2>Select a Quote or Type Your Own</h2>\n                      <div className=\"quotes-grid\">\n                        {isLoadingQuotes ? (\n                          <p>Loading quotes...</p>\n                        ) : (\n                          quotes.map((quote, index) => (\n                            <div\n                              key={index}\n                              className={`quote-card ${customText === quote ? 'selected' : ''}`}\n                              onClick={() => handleQuoteSelect(quote)}\n                            >\n                              <p>{quote.length > 100 ? quote.substring(0, 100) + '...' : quote}</p>\n                            </div>\n                          ))\n                        )}\n                      </div>\n                      <div className=\"custom-text-input\">\n                        <textarea\n                          value={customText}\n                          onChange={(e) => setCustomText(e.target.value)}\n                          placeholder=\"Or type your own text here...\"\n                          rows={4}\n                        />\n                      </div>\n                      <button \n                        className=\"start-button\"\n                        onClick={handleStartRace}\n                        disabled={!isConnected}\n                      >\n                        Start Single Player Race\n                      </button>\n                      <button \n                        className=\"multiplayer-button\"\n                        onClick={() => window.location.href = '/race/multiplayer'}\n                        disabled={!isConnected}\n                      >\n                        Join Multiplayer Race\n                      </button>\n                    </div>\n                  </div>\n                )}\n                {/* Show countdown overlay when countdown is active */}\n                {countdown > 0 && (\n                  <div className=\"countdown-overlay\">\n                    <div className=\"countdown\">{countdown}</div>\n                    {textToType && (\n                      <div className=\"race-text\" data-testid=\"race-text\">\n                        {textToType}\n                      </div>\n                    )}\n                  </div>\n                )}\n                {/* Show race components when text is available and either countdown is active or race is in progress */}\n                {textToType && (countdown > 0 || raceState === 'racing' || raceState === 'finished') && (\n                  <>\n                    <RaceTrack \n                      racers={racers} \n                      myProgress={myProgress} \n                      countdown={countdown}\n                      isReady={true}\n                      raceState={raceState}\n                    />\n                    <TypingArea\n                      textToType={textToType}\n                      onProgress={handleTypingProgress}\n                      typedText={typedText}\n                      setTypedText={setTypedText}\n                      onStart={handleStartRace}\n                      isRaceComplete={raceState === 'finished'}\n                      isStarted={raceState === 'racing' || countdown > 0}\n                      isMultiplayer={false}\n                    />\n                  </>\n                )}\n              </div>\n            }\n          />\n          <Route\n            path=\"/race/multiplayer\"\n            element={\n              <div className=\"race-container\">\n                <h2>Multiplayer Race</h2>\n                {raceState === 'waiting' ? (\n                  <div className=\"multiplayer-waiting\">\n                    <h2>Waiting for Players</h2>\n                    <button \n                      className=\"ready-button\"\n                      onClick={handleReady}\n                      disabled={!isConnected}\n                    >\n                      Ready to Race\n                    </button>\n                  </div>\n                ) : (\n                  <>\n                    {countdown > 0 && (\n                      <div className=\"countdown-overlay\">\n                        <div className=\"countdown\">{countdown}</div>\n                      </div>\n                    )}\n                    <RaceTrack \n                      racers={racers} \n                      myProgress={myProgress} \n                      countdown={countdown}\n                      isReady={true}\n                      onReady={handleReady}\n                      raceState={raceState}\n                    />\n                    <TypingArea\n                      textToType={textToType}\n                      onProgress={handleTypingProgress}\n                      typedText={typedText}\n                      setTypedText={setTypedText}\n                      isRaceComplete={raceState === 'finished'}\n                      isStarted={raceState === 'racing'}\n                    />\n                  </>\n                )}\n              </div>\n            }\n          />\n        </Routes>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App.jsx'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n)\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","CarIcon","color","jsx","RaceTrack","racers","onReady","isReady","countdown","raceState","colors","getRacerColor","index","sortedRacers","getPlace","racer","place","r","displayRacers","jsxs","TypingArea","textToType","onProgress","isMultiplayer","isStarted","onStart","isRaceComplete","input","setInput","useState","currentWordIndex","setCurrentWordIndex","isError","setIsError","startTime","setStartTime","wpm","setWpm","isCompleted","setIsCompleted","progress","setProgress","inputRef","useRef","lastProgressRef","textRef","words","currentWord","useEffect","calculateWPM","timeElapsed","completedWords","interval","currentWPM","initialWPM","calculateProgress","newInput","totalCorrectChars","i","totalChars","handleInputChange","newProgress","finalProgress","finalWPM","prev","completedText","renderText","word","wordIndex","isCurrentWord","isPastWord","React","char","charIndex","isTyped","isCorrect","APP_VERSION","BACKEND_URL","socket","io","shuffle","array","currentIndex","randomIndex","fallbackQuotes","App","isConnected","setIsConnected","setRaceState","setTextToType","setRacers","myProgress","setMyProgress","customText","setCustomText","typedText","setTypedText","myWpm","setMyWpm","quotes","setQuotes","isLoadingQuotes","setIsLoadingQuotes","setCountdown","currentRoom","setCurrentRoom","fetchQuotes","response","data","error","shuffledQuotes","onConnect","onDisconnect","onRoomState","state","onRaceUpdate","updatedRacers","myRacer","currentRacers","otherRacers","me","onCountdown","value","onReceiveText","text","formattedText","handleTypingProgress","currentInput","handleStartRace","raceText","singlePlayerRoom","handleQuoteSelect","quote","handleReady","roomId","Router","Routes","Route","Navigate","Fragment","ReactDOM","BrowserRouter"],"mappings":"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","x_google_ignoreList":[0,1,2]}