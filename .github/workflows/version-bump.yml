name: Version Bump

on:
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Type of version bump (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  
  # Automatic trigger on pushes
  push:
    branches: [main]
    paths:
      # Only trigger on significant changes, not on every commit
      - 'SpeedType/frontend/src/**/*.jsx'
      - 'SpeedType/frontend/src/**/*.js'
      - 'SpeedType/backend/src/**/*.ts'
      - '.github/workflows/version-bump.yml'
      # Exclude tests, docs, and configuration files
      - '!SpeedType/frontend/src/**/*.test.js'
      - '!SpeedType/frontend/src/**/*.test.jsx'
      - '!SpeedType/backend/src/**/*.test.ts'
      - '!**.md'
      - '!**.json'
      - '!.gitignore'
      - '!SpeedType/frontend/public/**'
      - '!SpeedType/frontend/test/**'
      - '!SpeedType/backend/test/**'

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      # Check if we should run the version bump
      - name: Check If Version Bump is Needed
        id: check-bump
        if: github.event_name == 'push'
        run: |
          # Find the last version bump commit
          LAST_BUMP=$(git log --grep="chore: bump version" -1 --format="%H")
          
          if [ -z "$LAST_BUMP" ]; then
            echo "No previous version bump found, will proceed"
            echo "should_bump=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Count significant commits since last bump (excluding version bump commits)
          COMMIT_COUNT=$(git log $LAST_BUMP..HEAD --no-merges --format="%H" -- 'SpeedType/frontend/src/' 'SpeedType/backend/src/' | grep -v "chore: bump version" | wc -l | tr -d ' ')
          echo "Found $COMMIT_COUNT significant commits since last version bump"
          
          # Only bump if we have at least 3 significant commits
          if [ "$COMMIT_COUNT" -ge 3 ]; then
            echo "Enough significant changes ($COMMIT_COUNT commits) to justify a version bump"
            echo "should_bump=true" >> $GITHUB_OUTPUT
          else
            echo "Not enough significant changes yet to justify a version bump"
            echo "should_bump=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine Version Bump Type
        id: bump-type
        if: github.event_name == 'workflow_dispatch' || steps.check-bump.outputs.should_bump == 'true'
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Use the manually specified bump type
            BUMP_TYPE="${{ github.event.inputs.bump_type }}"
            echo "Using manually specified bump type: $BUMP_TYPE"
          else
            # Automatic determination based on commit messages
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "Last tag: $LAST_TAG"
            
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s")
            echo "Commits since last tag:"
            echo "$COMMITS"
            
            # Default to patch bump
            BUMP_TYPE="patch"
            
            # Check for specific keywords in commit messages
            echo "$COMMITS" | grep -iE "BREAKING CHANGE|!:" && BUMP_TYPE="major"
            echo "$COMMITS" | grep -iE "feat:|feature:" && [ "$BUMP_TYPE" != "major" ] && BUMP_TYPE="minor"
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Determined bump type: $BUMP_TYPE"

      - name: Bump Version
        if: github.event_name == 'workflow_dispatch' || steps.check-bump.outputs.should_bump == 'true'
        run: |
          cd SpeedType/frontend
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into components
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          # Bump version based on type
          case "${{ steps.bump-type.outputs.bump_type }}" in
            "major")
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            *)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac
          
          echo "New version: $NEW_VERSION"
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          # Update version.js
          mkdir -p src/config
          echo '// This file is automatically updated by the version bump workflow' > src/config/version.js
          echo "export const APP_VERSION = '$NEW_VERSION';" >> src/config/version.js
          
          # Create commit and tag
          git add package.json src/config/version.js
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git tag -a "v$NEW_VERSION" -m "Version $NEW_VERSION"
          
          # Push changes
          git push
          git push --tags

      - name: Update Deployment Workflows
        if: github.event_name == 'workflow_dispatch' || steps.check-bump.outputs.should_bump == 'true'
        run: |
          NEW_VERSION=$(node -p "require('./SpeedType/frontend/package.json').version")
          echo "Triggering deployment for version $NEW_VERSION"